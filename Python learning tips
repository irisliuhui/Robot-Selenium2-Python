1.
点击开始->程序->Python 2.3->IDLE(Python GUI)。Linux用户也可以使用IDLE

2.
如何退出Python提示符
如果你使用的是Linux/BSD shell，那么按Ctrl-d退出提示符。如果是在Windows命令行中，则按Ctrl-z再按Enter。

3.
注意Python是大小写敏感的，即print与Print不一样——注意前一个是小写p而后一个是大写P。另外，确保在每一行的开始字符前没有空格或者制表符——我们将在后面讨论为什么这点是重要的。

4.
#!/usr/bin/python
Python至少应当有第一行那样的特殊形式的注释。它被称作 组织行 ——源文件的头两个字符是#!，后面跟着一个程序。这行告诉你的Linux/Unix系统当你 执行 你的程序的时候，它应该运行哪个解释器。

5.
help(str)——这会显示str类的帮助。str类用于保存你的程序使用的各种文本（字符串）。

6.picasso007
按q退出帮助。

7.获取操作符的帮助。
help('print')

8.
在Python中有4种类型的数——整数、长整数、浮点数和复数。

	2是一个整数的例子。
	长整数不过是大一些的整数。
	3.23和52.3E-4是浮点数的例子。E标记表示10的幂。在这里，52.3E-4表示52.3 * 10-4。
	(-5+4j)和(2.3-4.6j)是复数的例子。

9.
利用三引号，你可以指示一个多行的字符串。你可以在三引号中自由的使用单引号和双引号

10.
值得注意的一件事是，在一个字符串中，行末的单独一个反斜杠表示字符串在下一行继续，而不是开始一个新的行

11.
自然字符串
如果你想要指示某些不需要如转义符那样的特别处理的字符串，那么你需要指定一个自然字符串。自然字符串通过给字符串加上前缀r或R来指定。例如r"Newlines are indicated by \n"。

Unicode字符串
Unicode是书写国际文本的标准方法。如果你想要用你的母语如北印度语或阿拉伯语写文本，那么你需要有一个支持Unicode的编辑器。类似地，Python允许你处理Unicode文本——你只需要在字符串前加上前缀u或U。例如，u"This is a Unicode string."。

记住，在你处理文本文件的时候使用Unicode字符串，特别是当你知道这个文件含有用非英语的语言写的文本。

12.
给正则表达式用户的注释
一定要用自然字符串处理正则表达式。否则会需要使用很多的反斜杠。例如，后向引用符可以写成'\\1'或r'\1'。

13.
标识符的命名

标识符组成是数字字母下划线
标识符开头是字母和下划线
标识符区分大小写


14.
使用变量时只需要给它们赋一个值。不需要声明或定义数据类型。

15.
强烈建议你坚持在每个物理行只写一句逻辑行。
如果你想要在一个物理行中使用多于一个逻辑行，那么你需要使用分号（;）来特别地标明这种用法。
在多个物理行中写一个逻辑行，用反斜杠連接。

16.
15的情況，它被称为明确的行连接。
这种情况出现在逻辑行中使用了圆括号、方括号或波形括号的时候。这被称为暗示的行连接

17.如何缩进
不要混合使用制表符和空格来缩进，因为这在跨越不同的平台的时候，无法正常工作。我 强烈建议 你在每个缩进层次使用 单个制表符 或 两个或四个空格 。
选择这三种缩进风格之一。更加重要的是，选择一种风格，然后一贯地使用它，即 只 使用这一种风格。

18.
一个表达式可以分解为运算符和操作数。

19.
if..elif..else
while
for

20.
记住，你可以在while循环中使用一个else从句。

记住，else部分是可选的。如果包含else，它总是在for循环结束后执行一次，除非遇到break语句。

21.
break和continue語句可以在while和for循環中
continue语句被用来告诉Python跳过当前循环块中的剩余语句，然后 继续 进行下一轮循环。

22.函數 
函数通过def关键字定义。def关键字后跟一个函数的 标识符 名称，然后跟一对圆括号。圆括号之中可以包括一些变量名，该行以冒号结尾。接下来是一块语句，它们是函数体

23.
注意我们使用过的术语——函数中的参数名称为 形参 而你提供给函数调用的值称为 实参 。


24.
如果你想要为一个定义在函数外的变量赋值，那么你就得告诉Python这个变量名不是局部的，而是 全局 的。我们使用global语句完成这一功能。没有global语句，是不可能为定义在函数外的变量赋值的。

25.
重要
只有在形参表末尾的那些参数可以有默认参数值，即你不能在声明函数形参的时候，先声明有默认值的形参而后声明没有默认值的形参。
这是因为赋给形参的值是根据位置而赋值的。例如，def func(a, b=5)是有效的，但是def func(a=5, b)是 无效 的。

26.
关键参数,就是説如果有多個參數，其中有默認參數，就可以用變量名=值得方式給實參。這樣就避免了參數位置為題。2是可以只給需要的參數賦值。
def func(a, b=5, c=10):
    print 'a is', a, 'and b is', b, 'and c is', c

func(3, 7)
func(25, c=24)
func(c=50, a=100)

27.
pass语句在Python中表示一个空的语句块。

return语句用来从一个函数 返回 即跳出函数。我们也可选从函数 返回一个值 。

28.列表，元组，字典
mylist.append('an item')注意，使用点号来使用对象的方法。
len(shoplist)
shoplist.sort()
del shoplist[0]

29.元组一般用于输出中
print '%s is %d years old' % (name, age)
元组和列表十分类似，只不过元组和字符串一样是 不可变的 即你不能修改元组。元组通过圆括号中用逗号分割的项目定义。元组通常用在使语句或用户定义的函数能够安全地采用一组值的时候，即被使用的元组的值不会改变。

30.
含有0个或1个项目的元组。一个空的元组由一对空的圆括号组成，如myempty = ()。然而，含有单个元素的元组就不那么简单了。你必须在第一个（唯一一个）项目后跟一个逗号，这样Python才能区分元组和表达式中一个带圆括号的对象。即如果你想要的是一个包含项目2的元组的时候，你应该指明singleton = (2 , )。

31.
我们可以通过一对方括号来指明某个项目的位置从而来访问元组中的项目，就像我们对列表的用法一样。这被称作 索引 运算符。我们使用new_zoo[2]来访问new_zoo中的第三个项目。我们使用new_zoo[2][2]来访问new_zoo元组的第三个项目的第三个项目。

32.
字典类似于你通过联系人名字查找地址和联系人详细情况的地址簿，即，我们把键（名字）和值（详细情况）联系在一起。注意，键必须是唯一的，就像如果有两个人恰巧同名的话，你无法找到正确的信息。

d = {key1 : value1, key2 : value2 }。
ab['Swaroop']
ab['Guido'] = 'guido@python.org'
del ab['Spammer']
len(ab)
for name, address in ab.items():
    print 'Contact %s at %s' % (name, address)

if 'Guido' in ab: # OR ab.has_key('Guido')
    print "\nGuido's address is %s" % ab['Guido']

33.
列表、元组和字符串都是序列，但是序列是什么，它们为什么如此特别呢？序列的两个主要特点是索引操作符和切片操作符。索引操作符让我们可以从序列中抓取一个特定项目。切片操作符让我们能够获取序列的一个切片，即一部分序列。

print 'Item 0 is', shoplist[0]索引
print 'Item 1 to 3 is', shoplist[1:3]切片

34.
how to run the script
i.in cmd window - pythod filename.py
ii.in IDE of python - press F5
iii.double click the python file.

35.
模块的用处在于它能为你在别的程序中重用它提供的服务和功能。
import module
	module.property
	module.function
from module import property, function
	function
	property


36.
你可以使用内建的dir函数来列出模块定义的标识符。标识符有函数、类和变量。

当你为dir()提供一个模块名的时候，它返回模块定义的名称列表。如果不提供参数，它返回当前模块中定义的名称列表。

37.
记住列表的赋值语句不创建拷贝。你得使用切片操作符来建立序列的拷贝。

38.
字符串的一些方法。
name.startswith('Swa')
if 'a' in name:
if name.find('war') != -1:
delimiter.join(mylist)
